<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- Shiro 的Web过滤器 -->
    <!--1、与web.xml对应的bean -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!-- 如果没有认证将要跳转的登陆地址，http可访问的url，如果不在表单认证过虑器FormAuthenticationFilter中指定此地址就为身份认证地址 -->
        <property name="loginUrl" value="http://192.168.17.108:6080/cas/login?service=http://10.10.29.249:8099/shiro-cas"/>
        <property name="successUrl" value="/loginController/login"/>
        <!-- 没有权限跳转的地址 -->
        <property name="unauthorizedUrl" value="/index.jsp"/>

        <!-- 声明自定义的过滤器 -->
        <property name="filters">
            <map>
                <!-- 添加casFilter到shiroFilter -->
                <entry key="casFilter" value-ref="casFilter"/>
                <entry key="logoutFilter" value-ref="logoutFilter"/>
            </map>
        </property>

        <!--过滤定义，从上而下，蒋匿名的anon放最下面 -->
        <!-- anon,authc,authcBasic,user是第一组认证过滤器 -->
        <!-- perms,port,rest,roles,ssl是第二组授权过滤器 -->
        <!-- anon org.apache.shiro.web.filter.authc.AnonymousFilter表示可匿名使用,可以理解为匿名用户或游客 -->
        <!-- authc org.apache.shiro.web.filter.authc.FormAuthenticationFilter表示需认证才能使用 -->
        <!-- authcBasic org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter表示httpBasic认证 -->
        <!-- logout org.apache.shiro.web.filter.authc.LogoutFilter退出过滤器 -->
        <!-- noSessionCreation org.apache.shiro.web.filter.session.NoSessionCreationFilter -->
        <!-- perms org.apache.shiro.web.filter.authz.PermissionAuthorizationFilter参数可写多个,多参时必须加上引号,且参数之间用逗号分割,如/admins/user/**=perms["user:add:*,user:modify:*"]
            当有多个参数时必须每个参数都通过才算通过,相当于isPermitedAll()方法 -->
        <!-- port org.apache.shiro.web.filter.authz.PortFilter当请求的URL端口不是8081时,跳转到schemal://serverName:8081?queryString
            其中schmal是协议http或https等,serverName是你访问的Host,8081是Port端口,queryString是你访问的URL里的?后面的参数 -->
        <!-- rest org.apache.shiro.web.filter.authz.HttpMethodPermissionFilter根据请求的方法,相当于/admins/user/**=perms[user:method],其中method为post,get,delete等 -->
        <!-- roles org.apache.shiro.web.filter.authz.RolesAuthorizationFilter参数可写多个,多个时必须加上引号,且参数之间用逗号分割,如/admins/user/**=roles["admin,guest"]
            当有多个参数时必须每个参数都通过才算通过,相当于hasAllRoles()方法 -->
        <!-- ssl org.apache.shiro.web.filter.authz.SslFilter表示安全的URL请求,协议为https -->
        <!-- user org.apache.shiro.web.filter.authz.UserFilter表示必须存在用户,当登入操作时不做检查 -->
        <property name="filterChainDefinitions">
            <value>
                /shiro-cas = casFilter
                /logout = logoutFilter
                /** = user
            </value>
        </property>

    </bean>

    <bean id="passwordShiroFilter" class="com.aioute.shiro.filter.PasswordShiroFilter"/>
    <!-- <bean id="kickoutSessionFilter" class="com.aioute.shiro.filter.KickoutSessionFilter"/> -->

    <bean id="casFilter" class="com.aioute.filter.MyCasFilter">
        <!-- 配置验证成功是的URL -->
        <property name="successUrl" value="index.jsp"/>
        <!-- 配置验证错误时的失败页面  -->
        <property name="failureUrl" value="error.jsp"/>
    </bean>

    <bean id="logoutFilter" class="org.apache.shiro.web.filter.authc.LogoutFilter">
        <property name="redirectUrl" value="${shiro.logoutUrl}"/>
    </bean>

    <!-- 2、安全(权限)管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- 基于数据库登录校验的实现 com.persia.upm.ShiroDbRealm -->
        <property name="realm" ref="shiroDbRealm"/>
        <property name="subjectFactory" ref="casSubjectFactory"></property>
        <!-- session 管理器 -->
        <property name="sessionManager" ref="sessionManager"/>
        <!--<property name="rememberMeManager" ref="rememberMeManager"/>-->
        <!-- 缓存管理器
        <property name="cacheManager" ref="shiroCacheManager"/>-->
    </bean>

    <!--realm -->
    <bean id="shiroDbRealm" class="com.aioute.shiro.realm.PasswordShiroRealm">
        <!-- 认证通过后的默认角色 -->
        <!-- <property name="defaultRoles" value="ROLE_USER" /> -->
        <!-- cas服务端地址前缀 -->
        <property name="casServerUrlPrefix" value="http://192.168.17.108:6080/cas"/>
        <!-- 应用服务地址，用来接收cas服务端票据 -->
        <property name="casService" value="http://10.10.29.249:8099/shiro-cas"/>
    </bean>

    <bean id="casSubjectFactory" class="org.apache.shiro.cas.CasSubjectFactory"></bean>

    <!-- session管理器 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!-- 超时时间 -->
        <property name="globalSessionTimeout" value="86400000"/>
        <!-- session存储的实现 -->
        <property name="sessionDAO" ref="shiroSessionDao"/>
        <!-- sessionIdCookie的实现,用于重写覆盖容器默认的JSESSIONID -->
        <property name="sessionIdCookie" ref="sharesession"/>
        <!-- 定时检查失效的session -->
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <!-- 删除失效的session -->
        <property name="deleteInvalidSessions" value="true"/>
    </bean>

    <!-- session存储的实现 -->
    <bean id="shiroSessionDao" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO"/>

    <!-- sessionIdCookie的实现,用于重写覆盖容器默认的JSESSIONID -->
    <bean id="sharesession" class="org.apache.shiro.web.servlet.SimpleCookie">
        <!-- cookie的name,对应的默认是 JSESSIONID -->
        <constructor-arg name="name" value="SHAREJSESSIONID"/>
        <!-- jsessionId的path为 / 用于多个系统共享jsessionId -->
        <property name="path" value="/"/>
    </bean>

    <!-- 定时清理僵尸session,shiro会启用一个后台守护线程定时执行清理操作 用户直接关闭浏览器造成的孤立会话-->
    <bean id="sessionValidationScheduler"
          class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
        <property name="interval" value="3600000"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>
    <!-- 记住登录 -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <property name="cipherKey"
                  value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>

    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="rememberMe"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="2592000"/><!-- 30天 -->
    </bean>

    <!-- 密码加密 -->
    <bean id="passwordHelper" class="com.aioute.shiro.password.PasswordHelper"/>
</beans>